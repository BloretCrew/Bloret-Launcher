name: 应用程序打包

permissions:
  contents: read

on:
  push:
    branches:
      - Windows

jobs:
  build:
    runs-on: windows-latest

    env:
      PYTHON_VERSION: '3.9'
      OUTPUT_DIR: 'output'
      ARTIFACT_NAME: 'Bloret-Launcher-Windows.zip'

    steps:
    - name: 检出代码
      uses: actions/checkout@v2

    - name: 验证资源文件路径
      run: |
        Get-ChildItem -Path .
        if (-not (Test-Path "icons/bloret.png")) { Write-Host "icons/bloret.png not found"; exit 1 }
        if (-not (Test-Path "config.json")) { Write-Host "config.json not found"; exit 1 }
        if (-not (Test-Path "ui")) { Write-Host "ui directory not found"; exit 1 }
        if (-not (Test-Path "cmcl.json")) { Write-Host "cmcl.json not found"; exit 1 }
        if (-not (Test-Path "cmcl.exe")) { Write-Host "cmcl.exe not found"; exit 1 }
        if (-not (Test-Path "cmcl.blank.json")) { Write-Host "cmcl.blank.json not found"; exit 1 }
      shell: pwsh

    - name: 设置 Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装程序依赖和打包依赖
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pillow
        pip install pyinstaller

    - name: 将 PNG 图标转换为 ICO
      run: |
        python -c "
        from PIL import Image
        img = Image.open('icons/bloret.png')
        img.save('icons/bloret.ico', format='ICO')
        "

    - name: 验证转换后的 ICO 文件路径
      run: |
        if (-not (Test-Path "icons/bloret.ico")) { exit 1 }
      shell: pwsh

    - name: 使用 PyInstaller 打包
      run: |
        pyinstaller --onefile --noconsole --icon=icons/bloret.ico --name=Bloret-Launcher `
          --add-data "icons\\bloret.ico;." `
          --add-data "config.json;." `
          --add-data "ui;ui" `
          --add-data "cmcl.json;." `
          --add-data "cmcl.exe;." `
          --add-data "cmcl.blank.json;." `
          --hidden-import=sip `
          --hidden-import=qfluentwidgets `
          --hidden-import=win10toast `
          --paths=. `
          Bloret-Launcher.py
      shell: pwsh

    - name: 创建包含其他文件夹的目录
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        cp dist/Bloret-Launcher.exe ${{ env.OUTPUT_DIR }}/
        cp -r icons/ ${{ env.OUTPUT_DIR }}/
        cp -r ui/ ${{ env.OUTPUT_DIR }}/
        cp -r cmcl.exe ${{ env.OUTPUT_DIR }}/
        cp -r cmcl.json ${{ env.OUTPUT_DIR }}/
        cp -r cmcl.blank.json ${{ env.OUTPUT_DIR }}/
        cp -r config.json ${{ env.OUTPUT_DIR }}/
        cp -r LICENSE ${{ env.OUTPUT_DIR }}/
        cp -r servers.dat ${{ env.OUTPUT_DIR }}/
        cp -r cmcl_save.json ${{ env.OUTPUT_DIR }}/

    - name: 清理旧压缩包
      run: |
        if (Test-Path "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}") {
          Remove-Item "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
        }
      shell: pwsh

    - name: 创建压缩包
      run: Compress-Archive -Path "${{ env.OUTPUT_DIR }}/*" -DestinationPath "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
      shell: pwsh

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Bloret-Launcher
        path: "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
  code-package:
    runs-on: windows-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2

    - name: 创建输出目录并清理
      run: |
        # 强制创建目录并清理旧内容
        New-Item -ItemType Directory -Force -Path "output"
        Remove-Item -Path "output/*" -Recurse -ErrorAction Ignore
      shell: pwsh

    - name: 复制所有文件（排除 .git 和 output）
      run: |
        # 递归复制所有文件到 output 目录，排除 .git 和 output 目录
        Copy-Item -Path "*" -Destination "output" -Recurse -Exclude @(".git", "output")
      shell: pwsh

    - name: 创建压缩包
      run: |
        # 直接压缩 output 目录内容为 package.zip
        Compress-Archive -Path "output/*" -DestinationPath "output/package.zip" -Force
      shell: pwsh

    - name: 上传压缩包
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: "output/package.zip"